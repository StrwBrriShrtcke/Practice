//Function that checks the whether the the integer n is a prime number, and 
// the time taken to evaluate this
function square(x) {
    return x * x;
}

function smallest_divisor(n) {
    return find_divisor(n, 2);
}

function find_divisor(n, test_divisor) {
    return square(test_divisor) > n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, test_divisor + 1);
}
function divides(a, b) {
    return b % a === 0;
}

function is_prime(n) {
    return n === smallest_divisor(n);
}

function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}

function start_prime_test(n, start_time) {
    return is_prime(n)
          ? report_prime(get_time() - start_time)
          : false;
}

function report_prime(elapsed_time) {
    display(" *** ");
    display(elapsed_time);
    return true;
}


//Funciton that tests for a range of numbers
function range_of_function(func, start, end) {
    function iter(sequence, counter) {
        return counter >= end
        ? sequence
        : counter % 2 === 0 
        ? iter(sequence + stringify(func(counter + 1)), counter + 2)
        : iter(sequence + " " + stringify(func(counter)), counter + 1);
    }
    return iter("", start);
}

function three_smallest_prime(func, start, end) {
    function iter(sequence, counter) {
        return counter === 3
        ? sequence
        : timed_prime_test(counter) === true
        ? iter(sequence + stringify(func(counter + 1)), counter + 1)
        : "";
    }
    return iter("", start);
}

three_smallest_prime(range_of_function, 1000, 1100);
