//Function that checks the whether the the integer n is a prime number, and 
// the time taken to evaluate this
function square(x) {
    return x * x;
}

function smallest_divisor(n) {
    return find_divisor(n, 2);
}

function find_divisor(n, test_divisor) {
    return square(test_divisor) > n
           ? n
           : divides(test_divisor, n)
           ? test_divisor
           : find_divisor(n, test_divisor + 1);
}
function divides(a, b) {
    return b % a === 0;
}

function is_prime(n) {
    return n === smallest_divisor(n);
}

function timed_prime_test(n) {
    display(n);
    return start_prime_test(n, get_time());
}

function start_prime_test(n, start_time) {
    return is_prime(n)
          ? report_prime(get_time() - start_time)
          : false;
}

function is_odd(n) {
    return n % 2 === 0
    ? n + 1
    : n;
}

function report_prime(elapsed_time) {
    display(" *** ");
    display(elapsed_time);
    return true;
}


//Funciton that tests for a range of numbers
function search_for_prime(start) {
    function first_three_prime(prime_number, counter, test_number) {
        return counter === 3
        ? prime_number
        : is_prime(test_number) && counter <= 1
        ? first_three_prime(prime_number + stringify(test_number) + " ", 
        counter + 1, test_number + 2)
        : is_prime(test_number) && counter > 1
        ? first_three_prime(prime_number + stringify(test_number), 
        counter + 1, test_number + 2)
        : first_three_prime(prime_number,counter, test_number + 2);
    }
    return first_three_prime("", 0, is_odd(start));
}
display(search_for_prime(1000));//1009, 1013, 1019
display(search_for_prime(10000));//10007, 10009, 10037
display(search_for_prime(100000));//100003, 1000019, 1000037
display(search_for_prime(1000000));//1000003, 1000033, 1000037

function time_function(f) {
    const start_time = get_time();
    f();
    return get_time() - start_time;
}
// display(time_function(() => search_for_prime(1000))); //5
// display(time_function(() => search_for_prime(10000))); //7

function is_order_of_growth_log(first, second) {
    return time_function(() => search_for_prime(first)) * math_sqrt(10) ===
    time_function(() => search_for_prime(second));
}

is_order_of_growth_log(1000, 10000);



