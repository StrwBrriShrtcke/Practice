function abs(x) {
    return x >= 0 ? x : - x;
}

function square(x) {
    return x * x;
}

function relativeTolerance(x) {
    return x * 0.001;
}

function is_good_enough(guess, x) {
    return abs(square(guess) - x) < relativeTolerance(x);
}

function average(x, y) {
    return (x + y) / 2;
}

function improve(guess, x) {
    return average(guess, x / guess);
}

function sqrt_iter(guess, x) {
    return is_good_enough(guess, x)
          ? guess
          : sqrt_iter(improve(guess, x), x);
}

// is_good_enough is not effective for finding the square roots of very 
// small numbers because its condition is satisfied once the difference 
// between radicand and our guess is less than 0.001. This means that for
// numbers smaller than 0.001 our guess will likely satisfy the 
// is_good_enough condition and be computed as the square root of the 
// radicand despite being inaccurate.

// display(sqrt_iter(0.001, 0.0002)); //0.001
// display(sqrt_iter(0.01, 0.0002)); //0.01
// display(sqrt_iter(0.02, 0.0002)); //0.02
// display(sqrt_iter(0.03, 0.0002)); //0.03

// when trying to find the sqrt of 0.0002, the above function computes the
// answer as the guess as the final answer as the difference between the
// radicant and each of the above guesses is less than 0.001 as the number
// is very small, hence making it ineffective for finding the square roots 
// of very small numbers.


display(sqrt_iter(10, 23423452345678906789056789));

